#
# This is Chad Lake's .bashrc file:
#
# This file is executed by every shell
#
#


################################
# Set up some common variables #
################################
# set the OS and OSVERSION flags from the output of uname
osval=(`uname -a`)
OS=${osval[0]}
OSVERSION=${osval[2]}
if [ $OS = "SunOS" ]; then
    case $OSVERSION in
	5* )
	   OS="Solaris"
	   ;;
    esac
fi
unset osval
export OS OSVERSION


#########################
# Customize set options #
#########################
# set -o allexport
set -b
shopt -s checkwinsize
shopt -s cmdhist
shopt -s histappend
shopt -s dotglob
shopt -s nullglob
shopt -s failglob
shopt -u no_empty_cmd_completion
shopt -u sourcepath
if [ ! $OS = "Solaris" ]; then
    # Solaris 5.6's bash doesn't support these options
    shopt -s nocaseglob
    shopt -s extglob
fi


##########################################
# Some things change dependent on the OS #
##########################################
if [ $OS = "Solaris" ]; then
    GREP="/usr/xpg4/bin/grep"
elif [ $OS = "Darwin" ]; then
    GREP="/usr/bin/grep"
else
    GREP="/bin/grep"
fi


##############################################
# Set up some standard environment variables #
##############################################

# display for prompt
# if echo $- | $GREP -qi "i" ; then
#   echo -n "Setting variables..."
# fi

PGPPATH="/home/clake/.pgp"; export PGPPATH




###########################
# Figure out the hostname #
###########################
if [ "$OS" == "Linux" ]; then
    HOST=`/bin/hostname --fqdn`
elif [ "$OS" == "Solaris" ]; then
    HOST="`/bin/hostname`.`/bin/domainname`"
elif [ "$OS" == "Darwin" ]; then
    HOST=`/bin/hostname`
else 
    # What OS are we on then? 
    if [ -x /bin/hostname ]; then 
	HOST=`/bin/hostname`
    elif [ -x /sbin/hostname ]; then
	HOST=`/sbin/hostname`
    else 
	HOST="Unknown"
    fi 
fi



################
# PATH munging #
################
# PATH="/bin:/usr/bin"
pathmunge () {
    # make sure directory exists and is not already in PATH
    # before adding it in. 
    # optional second argument of "after"/"before" will new directory
    # at the specified end of PATH; default is after
    if [ -z "$2" ]; then
	order="after"
    else
	order="$2"
    fi
    dirtoadd="$1"
    if [ -d "$dirtoadd" ]; then
	if echo $PATH | $GREP -iEq "(^|:)$dirtoadd($|:)"; then
	    # clear that entry out of the path to make room
	    # for the new entry
	    PATH=`echo $PATH | sed "s:\(^\|\:\)$dirtoadd\(\:\|$\):\::g; s/^:\|:$//"`
	fi	
	if [ "$order" = "after" ] ; then
	    PATH=$PATH:$1
	elif [ "$order" = "before" ]; then
	    PATH=$1:$PATH
	else
	    echo "Bad path specifier: \"$order\"" >& 2
	fi
    fi
    unset dirtoadd
    unset order
}
manpathmunge () {
    # make sure directory exists and is not already in MANPATH
    # before adding it in. 
    # optional second argument of "after"/"before" will new directory
    # at the specified end of MANPATH; default is after
    if [ -z "$2" ]; then
	order="after"
    else
	order="$2"
    fi
    if [ -d $1 ]; then
	if ! echo $MANPATH | $GREP -iEqi "(^|:)$1($|:)" ; then
	    if [ "$order" = "after" ] ; then
		MANPATH=$MANPATH:$1
	    elif [ "$order" = "before" ]; then
		MANPATH=$1:$MANPATH
	    else
		echo "Bad manpath specifier: \"$order\"" >& 2
	    fi
	fi
    fi
}
# part of the display
# if echo $- | $GREP -qi "i" ; then
#   echo -n "paths..."
# fi

# Look over optional paths
for dir in /usr/X11R6/bin /uusoc/opt/bin /usr/local/{,gnu/,s}bin /usr/sbin /sbin; do
    pathmunge $dir after
done
# We want these up front
for dir in /home/clake/bin /local/archive/{s,}bin /local/{s,}bin /uusoc/{s,}bin; do
    pathmunge $dir before
done


# man stuff
manpathmunge /uusoc/man
manpathmunge /uusoc/opt/man
manpathmunge /local/archive/man 


# OS-specific paths and commands
case $OS in
    "Solaris")
       pathmunge /usr/xpg4/bin
       pathmunge /opt/SUNWspro/bin after
       pathmunge /usr/ccs/bin after
       pathmunge /usr/ucb after
       pathmunge /usr/openwin/bin
       manpathmunge /usr/share/man
       for dir in /usr/local/man /usr/local/gnu/man /local/man; do
	 manpathmunge $dir after
       done
       export MANPATH
       ;;
    "Linux" )
       pathmunge ~clake/bin/linux after
       pathmunge /usr/bin/X11 after
       ;;
esac




#################
# Set the umask #
#################
# if [ $UID = 0 ]; then
umask 0022
# else
# mask 0022
# fi



##########################
# interactive-only stuff #
##########################
# I am putting this up here due to a bash bug.  This unlias HAS 
# to happen before it parses this block that redefined which
if [ `type -t which` = "alias" ]; then
    unalias which
fi
# the real start of interactive-only stuff
if tty -s; then
    #  echo "prompt..."
    set +o ignoreeof
    set +o nounset
    # use ^H as erase as FOUNDRY devices only use this. Of course, I also need to
    # update .inputrc and .vimrc for this.  This will only work with remote connections
    # as changing the console of virtual terminals in Linux is not something I want 
    # to get into
    # if echo $TERM | $GREP -iEq "^xterm"; then
    #    stty erase '^H'
    # fi

    # get our own which #
    which () {
	builtin type $*
    }

    # prompt stuff
    if [ $UID = 0 ]; then
	PS1="(\!) root@\h:\w:# "
    else
	PS1="[\!] \h:\w:> "
    fi
    # This sets an escape sequence so that Konsole will show the cwd in the title bar
    # export PS1=$PS1"\[\e]0;\H:\w\a\]"
    # This gets the cwd into the Konsole session name and the title bar
    # export PS1=$PS1"\[\e]30;\H:\w\a\]"

    # Set up some path-dependent variables
    PAGER=`type -p less`
    if [ -z "$PAGER" ]; then
	PAGER=`type -p more`
    fi
    if [ -z "$PAGER" ]; then
	export PAGER
    fi
    LESS="-qeiFX" ; export LESS
    EDITOR=`type -p vi` ; export EDITOR

  ## Completions
  # if [ ! $OS = "Solaris" ]; then
  #    complete -d cd
  #    complete -A alias unalias
  #    complete -W "-atime -ctime -exec -fstype -gid -group -iname -ipath -mtime -name -perm -print -size -type -uid -user" find
  #    complete -A command man
  #    complete -A export printenv
  #    complete -d rmdir
  #    # complete -G '*.pdf' xpdf
  # fi 

    ## Aliases and such
    if [ `type -t vi` = "alias" ]; then
	unalias vi
    fi
    alias viforward="sudo ssh clake@flash -L 192.168.45.1:443:yahweh.lackhead.org:443 -L 192.168.45.1:902:yahweh.lackhead.org:902 -N"
    alias mgp123=mpg123
    # alias mpg123=mpg321
    alias gotomx='ssh `dig mx amazon.com | grep -v TCP | head -1 | awk '\''{ print $6 }'\''`'
    alias pign=ping
    alias nums='cat /uusoc/sys/doc/numbers /home/clake/docs/numbers.txt | less'
    alias dirs='ls -l | egrep "^d"'
    alias grpe=grep 
    alias ls='ls -F'
    alias h=history
    alias pwds='gpg --decrypt ~clake/private/passes.gpg | less'
    alias purge='rm *~ .*~'
    alias purgeall='\rm -f .*~ *~'
    alias xterm='xterm -sb -rightbar -sl 1500 $*'
    alias rm='rm -i'
    alias mroe=more
    alias cleantex='\rm -f *.log *.aux *.dvi'
    alias vt100="TERM=vt100; export TERM; stty -tabs"
    alias screen='TERM=screen screen'
    # alias dnsp='dns_update -v -src /sys/dns -boot tmp.named.conf.primary ns1.cs.utah.edu'
    alias dig='dig +search +noall +answer $*'
    alias mailtunnel='kill `ps -ef | grep ssh | grep atom.lackhead.org | grep -- "-L" | awk "{ print \\$2 }"`; ssh -f -L 1587:10.69.0.70:587 -N atom.lackhead.org'

    # set mh aliases here
    # alias inc='scan +inbox unseen'
    # alias Mail='comp -editor emacsnw'
    # alias mhaledit='vi ~/.mail/mh_aliases'
    # alias mhal='less ~/.mail/mh_aliases'
    # alias rmn="rmm; next"
    # alias pmn="rmm; prev"
    # alias cnew='rmm cur-last'
    # mh2md () {
    #     # we need a temp file
    # 	stime=`date +"%s"`
    # 	tmpfile="/tmp/mh2md.$stime.$$"  
    #         # get an mbox file of what they want
    # 	yes | packf -mbox -file $tmpfile $@
    #         # suck it into a temp file
    # 	mb2md -s $tmpfile
    #         # remove the tmpfile
    # 	/bin/rm -f $tmpfile
    #     }
    #     inc () {
    #         # save whatever folder we are in now in case we need to change back
    # 	cur_folder=`folder -fast`
    #         # note that this line will change your current folder to newmail
    # 	num=`folder +newmail | awk '{print $3}'`
    # 	if [ "$num" = "no" ] ; then
    #             # change back to whatever folder we were in to begin with
    # 	    folder -fast +$cur_folder > /dev/null
    # 	    echo "No new messages.";
    # 	else 
    #             # get set up to remark cur
    # 	    mark +inbox -sequence cur last
    #             # move mail from newmail to inbox
    # 	    refile first:$num -src +newmail +inbox
    #             # set the new current message to the first msg moved over
    # 	    mark +inbox -sequence cur next
    #             # scan the new messages
    # 	    scan +inbox cur-last
    # 	fi
    #     }
    # 
    # keychain
     kch () {
	 local kch=`type -p keychain`
	 if [ -n "$kch" ]; then
	     $kch --host $HOST
	     if [ -f ~/.keychain/${HOST}-sh ] ; then
		 echo "Sourcing ~/.keychain/${HOST}-sh..."
		 . ~/.keychain/${HOST}-sh
                 # run ssh-add if we haven't added yet
                 for key in atom.lackhead.org_rsa lepton.atom.lackhead.org_rsa lackhead_rsa; do
  		    if ! ssh-add -l | grep -q $key; then
		     ssh-add $HOME/.ssh/$key
		    fi
                 done 
	     else 
		 echo "No keychain host file found for $HOST."
	     fi
	 else 
	     echo "keychain script was not found!"
	 fi
     }
     getos () {
        host=$1
        if [ -z "$host" ];  then
           echo "Usage: getos <hostname>"
           return 1
        fi
        line=`ssh $host cat /etc/issue | grep -i "[a-z]" | head -1`
        cleanline=`echo $line | sed 's/(.*//' | sed 's/Welcome to //' | sed 's/\\\.*//'`
        echo $cleanline
     }
     dnstest () {
        local firstxarg="";
        local secondxarg="-x";
        if `echo $1 | grep -q "^[0-9].*" >/dev/null`; then
            firstxarg="-x";
            secondxarg="";
        fi;
        local first=$1;
        local second=`\dig +search +short $firstxarg $first | tail -1 | awk '{ print $1 }'`;
        if [ -z "$second" ]; then
            echo "$first not found in DNS" 1>&2;
        else
            local third=`\dig +search +short $secondxarg $second | tail -1 | awk '{ print $1 }'`;
            echo "$first -> $second -> $third";
        fi
     }
     rpm_extract () {
         rpm2cpio $1 | cpio -i -d --no-absolute-filenames 
     }
     cdr2iso () {
        local orig="$1"
        local outname=`echo ${orig} | sed 's/.cdr$/.iso/'`
        hdiutil makehybrid -iso -joliet -o $outname $orig
     }
     cal () {
        # local function
        convmon () {
           mon=`echo $1 | sed 's/\(...\).*/\1/' | tr '[:upper:]' '[:lower:]'`
           case "$mon" in
              "jan" )  return 1 ;;
              "feb" )  return 2 ;;
              "mar" )  return 3 ;;
              "apr" )  return 4 ;;
              "may" )  return 5 ;;
              "jun" )  return 6 ;;
              "jul" )  return 7 ;;
              "aug" )  return 8 ;;
              "sep" )  return 9 ;;
              "oct" )  return 10 ;;
              "nov" )  return 11 ;;
              "dec" )  return 12 ;;
           esac
        }
        if [ $# -eq 0 ]; then 
           # First off, no args is easy
           /usr/bin/cal
           return
        fi
        # For everything else, let's set the year
        year=`date +'%Y'`
        # default is current year, else whatever arg they gave
        if [ $# -eq 2 ]; then
           year=$2
        fi 
        # now, let's figure out the first arg
        # One arg could be:
        #    range of months
        #    single month
        #    year
        if `echo $1 | grep -q '-' >/dev/null`; then
           local startmon=`echo $1 | sed 's/-.*//'`;
           local endmon=`echo $1 | sed 's/.*-//'`;
           shift;
           if `echo $startmon | grep -q '[^0-9]' >/dev/null`; then
              convmon $startmon 
              startmon=$?
           fi;
           if `echo $endmon | grep -q '[^0-9]' >/dev/null`; then
              convmon $endmon 
              endmon=$?
           fi;
           # do we need to start with next year? 
           curmon=`date +'%m' | sed 's/^0//'`
           if [ "$curmon" -gt "$startmon" ]; then
              ((year++))
           fi
           # we might cross a year boundary here
           if [ "$startmon" -gt "$endmon" ]; then
              # do the rest of this year
              for ((n=$startmon; n<=12; n++)); do
                 /usr/bin/cal $n $year;
              done
              # reset a few things
              startmon=1;
              ((year++))
           fi
           for ((n=$startmon; n<=$endmon; n++))
           do
               /usr/bin/cal $n $year;
           done;
           return;
        fi
        # not a range then
        month=$1
        if `echo $month | grep -qi '[a-z]'`; then
           convmon $month 
           month=$?
        fi
        if [ "$month" -le "12" ]; then
           # This is just a month, so assume you want the next occurance of the month, which
           # might be next year
           curmon=`date +'%m' | sed 's/^0//'`
           if [ "$curmon" -gt "$month" ]; then
              ((year++))
           fi
           /usr/bin/cal $month $year
        else
           # this isn't really a month...just a year perhaps
           /usr/bin/cal $month 
        fi 
     }
     fixamazonnames () {
        # This will clean up file names of mp3 files that are
        # purchased from Amazon.com, and reformat them to the
        # archive standard
        local DOIT=""
        local dirarg=""
        local DEFAULTDIR="~/Amazon MP3"
        while [ $# -gt 0 ]; do
           case $1 in
              -h)
                echo "fixamaonnames [ -e ] [ -h ] [ <dir> ]"
                echo "  -- fix file names of mp3 tracks downloaded from Amazon"
                echo
		echo "  [ -e ]  Shows what commans would be run"	    
		echo "  [ -h ]  Shows what you see now"
                echo "  <dir>   Optional directory to work on; defaults to $DEFAULTDIR"
                echo
                return
                ;;
              -e)
                DOIT="echo "
                ;;
              *)
                if [ -n "${dirarg}" ]; then
                   echo "Unknown argument $1"
                   return 1
                else
                   # strip trailing / if it's there since we'll be adding one
                   dirarg=`echo $1 | sed 's/\/$//'`
                fi
                ;;
           esac
           shift 1
        done
	# Root directory is "~/Amazon MP3/"
        if [ -z "${dirarg}" ]; then
           dirarg=${DEFAULTDIR}
        fi
        local cleanfile
        local file
	# clean up files now
        find "${dirarg}/" -type f -iname "*.mp3" -print0 | while read -d $'\0' file; do
	      cleanfile="`dirname "${file}"`/`basename "${file}" | sed 's/\ -\ /\./' | tr -s \  _`"
echo "file is $cleanfile"
              # skip files that are already fixed
	      if [ "${file}" != "${cleanfile}" ]; then
		 $DOIT mv -v "${file}" "${cleanfile}"
	      fi
        done
        # clean up directories
        find "${dirarg}/" -mindepth 1 -depth -type d -print0 | while read -d $'\0' dir; do
	      cleandir="`dirname "${dir}"`/`basename "${dir}" | tr -s \  _`"
              # skip files that are already fixed
	      if [ "${dir}" != "${cleandir}" ]; then
		 $DOIT mv -v "${dir}" "${cleandir}"
	      fi
        done
     }
     arsync () {
        local syncargs=""
        local opt
        local BASEDIR="/local/archive"
        local OPTIND=0
        local ECHO=""
        local MP3=""
        local EXCLUDES=""
        local FROM=0
        while getopts "defhmnx:" opt $@; do
           case "$opt" in
              d) syncargs="$syncargs --delete" ;;
              e) ECHO=" echo " ;;
              f) FROM=1 ;;
              m) MP3="mp3/" ;;
              n) syncargs="$syncargs -n" ;;
              x) EXCLUDES="${EXCLUDES} --exclude=${OPTARG}" ;;
              ?) echo ""
                 echo "Usage: arsync [ -defhn ] [ -x <dir> ] <server>"
                 echo ""
                 echo "   -d   Adds --delete flag"
                 echo "   -e   Echoes what command will be run"
                 echo "   -f   Server specified is where sync is coming from, instead of to"
                 echo "   -h   Displays what you see now"
                 echo "   -m   Only sync the mp3 directory"
                 echo "   -n   Adds the -n flag so nothing is actually done"
                 echo "   -x   Exclude <dir> from the sync (root take to be"
                 echo "        a subdirectory of ${BASEDIR}"
                 echo ""
                 return 0
                 ;;
           esac
        done
        shift $((OPTIND - 1))
        if [ -z "$1" ]; then
           echo "No argument supplied; nothing to do."
           return 0
        fi
        # set up excludes depending on what dir we're doing
        if [ -z "${MP3}" ]; then
           # full directory; don't copy over temp stuff
           EXCLUDES="${EXCLUDES} --exclude=tmp --exclude=incoming"
        fi
        if [ $FROM -eq 0 ]; then
           $ECHO rsync -rltuv $syncargs ${EXCLUDES} ${BASEDIR}/${MP3} $1:${BASEDIR}/${MP3}
        else
           $ECHO rsync -rltuv $syncargs ${EXCLUDES} $1:${BASEDIR}/${MP3} ${BASEDIR}/${MP3}
        fi
     }
         
         

     

     ##  System dependent stuff
     case $OS in 
	 "Linux" )
            alias tailme='tail --lines=30 /var/log/messages'
            # stty erase ^H
	    ;;
         "Darwin" )
	    # look for fink set-up file
            if [ -f "/sw/bin/init.sh" ]; then
	       . /sw/bin/init.sh
            fi
            ;;
         "Solaris" )
            CC=/opt/SUNWspro/bin/cc ; export CC
	    alias tailme='tail -20 /var/adm/messages'
	    alias mine='ps -ef | grep $USER'
	    if [ -d /usr/local/gnu/bin ] ; then
		for exe in gzip gunzip tar ; do 
		    if [ -e "/usr/local/gnu/bin/$exe" ] ; then
			alias $exe=/usr/local/gnu/bin/$exe
		    fi
		done
	    fi
	    ;;
	esac

      ## host dependent stuff
      case $HOST in 
          "406c8f39ff57.ant.amazon.com" )
             PS1="[\!] mac:\w:> "
             LESS="-nqIX"
             ;;
          "amsterdam.cs.utah.edu" )
             alias mlogs='less /var/log/mirrors/*.log /var/log/run_awstats.log /var/log/mozilla_xfer.log'
             LESS="-nqIX"
             ;;
          "cuzco.cs.utah.edu" )
             pathmunge /uusoc/flexlm/sbin
             ;;
          "hulk.bivy.lackhead.org" )
             alias grab_disk='grab_disk -e -d /local/archive/tmp/clake -D /dev/cdrom'
             ;;
          "rogue.bivy.lackhead.org" )
             alias grab_disk='grab_disk -e -d /local/archive/tmp/clake -C /dev/dvd'
             ;;
          "tmtgp.lackhead.org" )
             alias grab_disk='grab_disk -e -d /local/archive/tmp/clake -C /dev/cdrom'
             ;;
          "spidey.lackhead.org" )
             alias grab_disk='grab_disk -e -d /local/archive/tmp/clake -C /dev/dvd'
             ;;
          "poser.cs.utah.edu" )
             alias grab_disk='grab_disk -e -d /local/archive/tmp/clake -C /dev/dvd'
             ;;
         "lone.csbs.utah.edu" )
             pathmunge /usr/local/sbin before
             pathmunge /usr/local/bin before
             alias pwds='gpg --decrypt ~clake/.passes.gpg | less'
             slapdown () {
                 local pid=`ps -ef | grep slapd | grep -v grep | awk '{ print $2 }'`
                 kill -INT $pid
             }
             slapup () {
                 /usr/local/libexec/slapd -h ldap://lone.csbs.utah.edu/ ldaps://lone.csbs.utah.edu/ -f /usr/local/etc/openldap/slapd.conf $*
             }
             ;;

      esac

fi


####################
# exit, we're done #
####################
